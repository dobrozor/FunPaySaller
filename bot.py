import os
import logging
import time
import json
import re
import requests
import telebot
import lxml
import requests_toolbelt
import bs4
from dotenv import load_dotenv
from FunPayAPI import Account
from FunPayAPI.updater.runner import Runner
from FunPayAPI.updater.events import NewOrderEvent, NewMessageEvent

load_dotenv()

# Telegram bot
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = os.getenv("TELEGRAM_USER_ID")
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

COOLDOWN_SECONDS = 1
TOKEN_FILE = "auth_token.json"
FRAGMENT_API_URL = "https://api.fragment-api.com/v1"
waiting_for_nick = {}

# Fragment auth
FRAGMENT_TOKEN = None
FRAGMENT_API_KEY = os.getenv("FRAGMENT_API_KEY")
FRAGMENT_PHONE = os.getenv("FRAGMENT_PHONE")
FRAGMENT_MNEMONICS = os.getenv("FRAGMENT_MNEMONICS")



def clean_username(username):
    """–û—á–∏—â–∞–µ—Ç username –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ @"""
    if username:
        return username.lstrip('@').strip()
    return username

def send_telegram_notification(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
    try:
        bot.send_message(TELEGRAM_USER_ID, message, parse_mode='HTML')
        logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def get_fragment_balance():
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å Fragment"""
    global FRAGMENT_TOKEN
    url = f"{FRAGMENT_API_URL}/misc/wallet/"
    headers = {
        "Accept": "application/json",
        "Authorization": f"JWT {FRAGMENT_TOKEN}"
    }
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            return data.get("balance", 0)
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {response.text}")
            return 0
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0

def load_fragment_token():
    if os.path.exists(TOKEN_FILE):
        with open(TOKEN_FILE, "r") as f:
            return json.load(f).get("token")
    return None

def save_fragment_token(token):
    with open(TOKEN_FILE, "w") as f:
        json.dump({"token": token}, f)

def authenticate_fragment():
    try:
        mnemonics_list = FRAGMENT_MNEMONICS.strip().split()
        payload = {
            "api_key": FRAGMENT_API_KEY,
            "phone_number": FRAGMENT_PHONE,
            "mnemonics": mnemonics_list,
            "version": "V4R2"
        }
        res = requests.post(f"{FRAGMENT_API_URL}/auth/authenticate/", json=payload)
        if res.status_code == 200:
            token = res.json().get("token")
            save_fragment_token(token)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Fragment.")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            balance = get_fragment_balance()
            send_telegram_notification(
                f"ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Fragment\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance} TON</b>"
            )
            return token
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Fragment: {res.text}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Fragment: {e}")
        return None

def check_username_exists(username):
    global FRAGMENT_TOKEN
    clean_user = clean_username(username)
    url = f"{FRAGMENT_API_URL}/misc/user/{clean_user}/"
    headers = {
        "Accept": "application/json",
        "Authorization": f"JWT {FRAGMENT_TOKEN}"
    }
    try:
        res = requests.get(url, headers=headers)
        if res.status_code == 200:
            data = res.json()
            return "username" in data
        else:
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∏–∫–∞: {e}")
        return False

def direct_send_stars(token, username, quantity):
    try:
        clean_user = clean_username(username)
        data = {"username": clean_user, "quantity": quantity, "show_sender": "false"}
        headers = {
            "Authorization": f"JWT {token}",
            "Content-Type": "application/json"
        }
        res = requests.post(f"{FRAGMENT_API_URL}/order/stars/", json=data, headers=headers)
        if res.status_code == 200:
            return True, res.text
        return False, res.text
    except Exception as e:
        return False, str(e)

def parse_fragment_error(response_text):
    try:
        data = json.loads(response_text)
    except:
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞."

    if isinstance(data, dict):
        if "username" in data:
            return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π Telegram-—Ç–µ–≥. –°–µ–π—á–∞—Å –æ—Ñ–æ—Ä–º–∏–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤."
        if "quantity" in data:
            return "‚ùå –ú–∏–Ω–∏–º—É–º 50 ‚≠ê –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –°–µ–π—á–∞—Å –æ—Ñ–æ—Ä–º–∏–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤."
        if "errors" in data:
            for err in data["errors"]:
                if "Not enough funds" in err.get("error", ""):
                    return "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –Ω–∞—Å —Ä–µ–∑–∫–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–≤—ë–∑–¥—ã. –°–µ–π—á–∞—Å –æ—Ñ–æ—Ä–º–∏–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤."
    if isinstance(data, list):
        if any("Unknown error" in str(e) for e in data):
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –°–µ–π—á–∞—Å –æ—Ñ–æ—Ä–º–∏–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤."
    return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞."

def refund_order(account, order_id, chat_id):
    try:
        account.refund(order_id)
        logger.info(f"‚úîÔ∏è –í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
        send_telegram_notification(
            f"‚Ü©Ô∏è <b>–í–û–ó–í–†–ê–¢ –°–†–ï–î–°–¢–í</b>\n"
            f"üìã ID –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n"
            f"üí¨ –ß–∞—Ç: https://funpay.com/orders/{order_id}/\n"
            f"‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"
        )
        account.send_message(chat_id, "‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –∑–∞–∫–∞–∑ {order_id}: {e}")
        send_telegram_notification(
            f"‚ùå <b>–û–®–ò–ë–ö–ê –í–û–ó–í–†–ê–¢–ê</b>\n"
            f"üìã ID –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n"
            f"üí¨ –ß–∞—Ç: https://funpay.com/orders/{order_id}/\n"
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)[:100]}..."
        )
        account.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º.")
        return False

def process_order(account, chat_id, username, stars, order_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–≤–µ–∑–¥—ã —á–µ—Ä–µ–∑ Fragment API"""
    clean_user = clean_username(username)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    send_telegram_notification(
        f"üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b>\n"
        f"üìã ID: <code>{order_id}</code>\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{clean_user}\n"
        f"‚≠ê –ó–≤–µ–∑–¥: <b>{stars}</b>\n"
        f"üí¨ –ß–∞—Ç: https://funpay.com/orders/{order_id}/\n"
        f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
    account.send_message(chat_id, f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n"
                                  f"üë§ Username: @{clean_user}\n"
                                  f"‚≠ê –ó–≤–µ–∑–¥: {stars}\n"
                                  f"‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã
    logger.info(f"‚åõ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {stars} ‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{clean_user}...")
    success, response = direct_send_stars(FRAGMENT_TOKEN, clean_user, stars)

    if success:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        send_telegram_notification(
            f"‚úÖ <b>–ó–í–ï–ó–î–´ –û–¢–ü–†–ê–í–õ–ï–ù–´</b>\n"
            f"üìã ID –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{clean_user}\n"
            f"‚≠ê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{stars} ‚≠ê</b>\n"
            f"üéâ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
        )
        account.send_message(chat_id, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {stars} ‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{clean_user}!")
        logger.info(f"‚úÖ @{clean_user} –ø–æ–ª—É—á–∏–ª {stars} ‚≠ê")
    else:
        short_error = parse_fragment_error(response)
        send_telegram_notification(
            f"‚ùå <b>–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò</b>\n"
            f"üìã ID –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{clean_user}\n"
            f"‚≠ê –ó–≤–µ–∑–¥: <b>{stars}</b>\n"
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {short_error}\n"
            f"üîÅ –û—Ñ–æ—Ä–º–ª—è—é –≤–æ–∑–≤—Ä–∞—Ç..."
        )
        account.send_message(chat_id, short_error + "\nüîÅ –ü—ã—Ç–∞—é—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç...")
        refund_order(account, order_id, chat_id)

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, "ü§ñ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ FunPay\n\n"
                          "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                          "/balance - —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å Fragment\n"
                          "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞")

@bot.message_handler(commands=['balance'])
def send_balance(message):
    balance = get_fragment_balance()
    bot.reply_to(message, f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance} TON</b>", parse_mode='HTML')

@bot.message_handler(commands=['status'])
def send_status(message):
    bot.reply_to(message, "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ\n"
                          "ü§ñ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤ –∞–∫—Ç–∏–≤–µ–Ω")

def start_telegram_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    import threading

    def polling():
        try:
            bot.infinity_polling()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞: {e}")

    thread = threading.Thread(target=polling, daemon=True)
    thread.start()
    logger.info("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")

def main():
    global FRAGMENT_TOKEN
    golden_key = os.getenv("FUNPAY_AUTH_TOKEN")
    if not golden_key:
        logger.error("‚ùå FUNPAY_AUTH_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    start_telegram_bot()

    account = Account(golden_key)
    account.get()

    if not account.username:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
        return

    logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {account.username}")
    runner = Runner(account)

    FRAGMENT_TOKEN = load_fragment_token() or authenticate_fragment()
    if not FRAGMENT_TOKEN:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Fragment.")
        return

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –∑–≤–µ–∑–¥—ã...")

    last_reply_time = 0

    for event in runner.listen(requests_delay=3.0):
        try:
            now = time.time()
            if now - last_reply_time < COOLDOWN_SECONDS:
                continue

            if isinstance(event, NewOrderEvent):
                try:
                    order = account.get_order(event.order.id)
                    username = None
                    stars = None

                    if hasattr(order, 'buyer_params') and order.buyer_params:
                        username = clean_username(order.buyer_params.get("Telegram Username"))

                    if hasattr(order, 'lot_params') and order.lot_params:
                        for param in order.lot_params:
                            if param[0] == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥":
                                stars_match = re.search(r"(\d+)", param[1])
                                if stars_match:
                                    stars = int(stars_match.group(1))
                                break

                    if username and stars:
                        print(f"\nüéØ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ - @{username} - {stars} –∑–≤—ë–∑–¥")
                        print(f"üìã ID –∑–∞–∫–∞–∑–∞: {order.id}")
                        print("=" * 50)
                        process_order(account, order.chat_id, username, stars, order.id)
                        last_reply_time = now
                    else:
                        print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–∞ {order.id}")
                        if not username:
                            print("‚ùå Username –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        if not stars:
                            print("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        print("=" * 50)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ: {e}")
                    continue

            elif isinstance(event, NewMessageEvent):
                msg = event.message
                if msg.author_id != account.id:
                    send_telegram_notification(
                        f"üí¨ <b>–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>\n"
                        f"üë§ –û—Ç: <code>{msg.author}</code>\n"
                        f"üí¨ –ß–∞—Ç: <code>{msg.chat_id}</code>\n"
                        f"üìù –¢–µ–∫—Å—Ç: {msg.text[:100]}..."
                    )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

if __name__ == "__main__":
    main()

